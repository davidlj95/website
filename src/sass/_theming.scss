@use 'themes/constants';
@import 'helpers/scss-to-css-vars';

/**
 * Adds utility CSS classes to display or hide elements depending on the active color scheme
 */
@mixin display-hide-classes {
  html,
  html[data-color-scheme='light'] {
    .light-only {
      display: initial;
    }

    .dark-only {
      display: none;
    }
  }
  html[data-color-scheme='dark'] {
    .light-only {
      display: none;
    }

    .dark-only {
      display: initial;
    }
  }

  @media (prefers-color-scheme: dark) {
    html {
      .light-only {
        display: none;
      }

      .dark-only {
        display: initial;
      }
    }
  }
}

@mixin define-theme($theme) {
  @each $scheme in map-get($theme, schemes) {
    // When more themes are added, here we can do different if theme is not the default
    @include define-default-color-scheme($theme, $scheme);
  }
}

@mixin define-default-color-scheme($theme, $scheme) {
  $theme-slug: map-get($theme, slug);
  @if not $theme-slug or $theme-slug == '' {
    @error "Theme slug is missing";
  }
  $scheme-kind: map-get($scheme, kind);
  @if not $scheme-kind or $scheme-kind == '' {
    @error "Scheme kind is missing";
  }
  $vars: map-get($scheme, vars);

  @if $scheme-kind == constants.$light-color-scheme-kind {
    :root,
    :root[data-theme='#{$theme-slug}'],
    :root[data-color-scheme='#{$scheme-kind}'] {
      @include scss-vars-to-css-vars($vars);
    }
  } @else if $scheme-kind == constants.$dark-color-scheme-kind {
    @media (prefers-color-scheme: dark) {
      :root,
      :root[data-theme='#{$theme-slug}'] {
        @include scss-vars-to-css-vars($vars);
      }
    }
    :root[data-color-scheme='#{$scheme-kind}'] {
      @include scss-vars-to-css-vars($vars);
    }
  }
}
