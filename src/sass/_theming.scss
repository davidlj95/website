@use 'themes/constants';
@use 'sass:selector';
@use 'helpers/root-attribute';
@use 'sass:map';
@use 'helpers/scss-to-css-vars';

@mixin define-theme($theme) {
  @each $scheme in map.get($theme, schemes) {
    // When more themes are added, here we can do different if theme is not the default
    @include define-default-color-scheme($theme, $scheme);
  }
}

@mixin define-default-color-scheme($theme, $scheme) {
  $theme-slug: map.get($theme, slug);
  @if not $theme-slug or $theme-slug == '' {
    @error "Theme slug is missing";
  }
  $scheme-kind: map.get($scheme, kind);
  @if not $scheme-kind or $scheme-kind == '' {
    @error "Scheme kind is missing";
  }
  $vars: map.get($scheme, vars);

  @if $scheme-kind == constants.$common-color-scheme-kind {
    :root,
    :root[data-theme='#{$theme-slug}'] {
      @include scss-to-css-vars.scss-vars-to-css-vars($vars);
    }
  }
  @if $scheme-kind == constants.$light-color-scheme-kind {
    :root,
    :root[data-theme='#{$theme-slug}'],
    :root[data-color-scheme='#{$scheme-kind}'],
    :root[data-theme='#{$theme-slug}'][data-color-scheme='#{$scheme-kind}'] {
      @include scss-to-css-vars.scss-vars-to-css-vars($vars);
    }
  } @else if $scheme-kind == constants.$dark-color-scheme-kind {
    @media (prefers-color-scheme: dark) {
      :root,
      :root[data-theme='#{$theme-slug}'] {
        @include scss-to-css-vars.scss-vars-to-css-vars($vars);
      }
    }
    :root[data-color-scheme='#{$scheme-kind}'],
    :root[data-theme='#{$theme-slug}'][data-color-scheme='#{$scheme-kind}'] {
      @include scss-to-css-vars.scss-vars-to-css-vars($vars);
    }
  }
}

$_light-mode-attribute-selector: '[data-color-scheme="light"]';
$_no-color-scheme-attribute-selector: ':not([data-color-scheme])';
@mixin when-light-mode {
  @include root-attribute.context($_light-mode-attribute-selector) {
    @content;
  }
  @include root-attribute.context($_no-color-scheme-attribute-selector) {
    @media (not (prefers-color-scheme: dark)) {
      @content;
    }
  }
}
$_dark-mode-attribute-selector: '[data-color-scheme="dark"]';
@mixin when-dark-mode {
  @include root-attribute.context($_dark-mode-attribute-selector) {
    @content;
  }
  @include root-attribute.context($_no-color-scheme-attribute-selector) {
    @media (prefers-color-scheme: dark) {
      @content;
    }
  }
}
