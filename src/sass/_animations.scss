@use 'sass:list';
@use 'sass:map';
@use 'sass:selector';

// https://m3.material.io/styles/motion
// To be in sync with animations.ts
$short-durations: (
  1: 50ms,
  2: 100ms,
  3: 150ms,
  4: 200ms,
);
$short-duration: map.get($short-durations, 2);
$medium-durations: (
  1: 250ms,
  2: 300ms,
  3: 350ms,
  4: 400ms,
);
$medium-duration: map.get($medium-durations, 2);
$long-durations: (
  1: 450ms,
  2: 500ms,
  3: 550ms,
  4: 600ms,
);
$long-duration: map.get($long-durations, 2);

$standard-easing: cubic-bezier(0.2, 0, 0, 1);
$standard-style: (
  duration: $medium-duration,
  timing-function: $standard-easing,
);
$emphasized-style: (
  duration: $long-duration,
  timing-function: $standard-easing,
);

@mixin multiple-transitions($properties, $style: $standard-style) {
  transition-property: $properties;
  transition-duration: map.get($style, duration);
  transition-timing-function: map.get($style, timing-function);
}

@mixin single-transition($property, $style: $standard-style) {
  transition: transition($property, $style);
}

@function transition($property, $style: $standard-style) {
  @return $property map.get($style, duration) map.get($style, timing-function);
}

$_reduced-motion-selector: 'html:not([data-reduced-motion])';
@mixin define-with-host-context() {
  @at-root {
    // ðŸ‘‡ Angular adds [_nghost-ng-g4rb4g3] when using :host-context(selector) twice to:
    //      - Match selector in host: `selector:host`
    //      - Match selector in any host's ancestor: `selector :host`
    //    In this case, given selector is `html`, `html:host` makes no sense as we know the component
    //    will never be `<html>`
    //
    //    Example output:
    //      html:not([data-reduced-motion])[_nghost-ng-g4rb4g3] selector[_ngcontent-ng-cp00p],
    //      html:not([data-reduced-motion]) [_nghost-ng-g4rb4g3] selector[_ngcontent-ng-cp00p],
    //
    //    First one could be omitted. There is an issue that slightly talks about it in Angular repo:
    //    https://github.com/angular/angular/issues/51954
    //    But the point of applying `:host-context(html)` was not successfully explained
    //    It's appearing in production builds. Taking note to create an issue about this.
    #{selector.nest(':host-context(#{$_reduced-motion-selector})', &)} {
      @media (prefers-reduced-motion: no-preference) {
        @content;
      }
    }
  }
}

@mixin define {
  @at-root {
    #{selector.nest($_reduced-motion-selector, &)} {
      @media (prefers-reduced-motion: no-preference) {
        @content;
      }
    }
  }
}
