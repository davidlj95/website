@use 'sass:selector';
@use 'sass:string';

@mixin define-global-host-context($attributeSelector) {
  $selector: assert-is-attribute-selector($attributeSelector);
  @at-root {
    // ðŸ‘‡ Angular adds [_nghost-ng-g4rb4g3] when using :host-context(selector) twice to:
    //      - Match selector in host: `selector:host`
    //      - Match selector in any host's ancestor: `selector :host`
    //    In this case, given selector is `html`, `html:host` makes no sense as we know the component
    //    will never be `<html>`
    //
    //    Example output:
    //      html:[data-reduced-motion][_nghost-ng-g4rb4g3] selector[_ngcontent-ng-cp00p],
    //      html:[data-reduced-motion] [_nghost-ng-g4rb4g3] selector[_ngcontent-ng-cp00p],
    //
    //    First one could be omitted. There is an issue that slightly talks about it in Angular repo:
    //    https://github.com/angular/angular/issues/51954
    //    But the point of applying `:host-context(html)` was not successfully explained
    //    It's appearing in production builds. Taking note to create an issue about this.
    #{selector.nest(':host-context(html#{$selector})', &)} {
      @content;
    }
  }
}

@function assert-is-attribute-selector($selector) {
  $openingBrace: string.index($selector, '[');
  $closingBrace: string.index($selector, ']');

  @if not $openingBrace or not $closingBrace {
    @error 'Invalid attribute selector "#{$selector}". Braces not found';
  }

  @if $openingBrace >= $closingBrace {
    @error 'Invalid attribute selector "#{$selector}". Closing brace found before opening brace';
  }
  $notPseudoClassStart: ':not(';
  @if string.slice($selector, 1, 1) !=
    '[' and
    string.slice($selector, 1, string.length($notPseudoClassStart)) !=
    $notPseudoClassStart
  {
    @error 'Invalid attribute selector "#{$selector}". Does not start with opening brace or :not pseudo-class';
  }

  @return $selector;
}
